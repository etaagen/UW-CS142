// 1 - Expressions
4 * 3/8 + 2.5 * 2 = 1 + 5 = 6.0
26 % 10 % 4 * 3 = 6
(5 * 7.0/2 - 2.5)/5 * 2 = 15.0/5 * 2 = 6.0
12/7 * 4.4 * 2/4 = 8.8 /4 = 2.2
"hello 34 " + 2 * 4 = "hello 34 8"
"2 + 2 " + 3 + 4 = "2 + 2 + 34"
3 + 4 + " 2 + 2" = "7 2+2"
41 % 7 * 3/5 + 5/2 * 2.5 = 8.0
22 + 4 * 2 = 30
10.0/2/4 = 1.25
23 % 8 % 3 = 1
17 % 10/4 = 1
8/5 + 13/2/3.0 = 3.0 
12 - 2 - 3 = 7
6/2 + 7/3 = 5
6 * 7%4 = 42 % 4 = 2
(2.5 + 3.5)/2 = 3.0
9/4 * 2.0 - 5/4 = 4.0 - 1 = 3.0
3 * 4 + 2 * 3 = 18
177 % 100 % 10/2 = 3
9/2.0 + 7/3 - 3.0/2 = 4.5 + 2 - 1.5 = 5.0
813 % 100/3 + 2.4 = 6.4
27/2/2.0 * (4.3 + 1.7) - 8/3 = 6.5*(6.0) - 2 = 37.0
89 % (5 + 5) % 5 = 9 % 5 = 4
4.0/2 * 9/2 = 9.0
392/10 % 10/2 = 4
53/5/(0.6 + 1.4)/2 + 13/2 = 2.5 + 6 = 8.5
8 * 2 - 7/4 = 15
37 % 20 % 3 * 4  = 8
2.5 * 2 + 8/5.0 + 10/3 = 5.0 + 1.6 + 3 = 9.6
2 * 3/4 * 2/4.0 + 4.5 - 1 = 4.0
89 % 10/4 * 2.0/5 + (1.5 + 1.0/2) * 2 = 4.8

// 2 - Variables
int max;
int min = 10;
max = 17 - 4 / 10; // 17
max = max + 6; // 23
min = max - min; // 13
System.out.println(max * 2); // 46
System.out.println(max + min); // 36
System.out.println(max); // 23
System.out.println(min); // 13

// 3 - Variables
int a = 2; 24, 4
int b = 3; 2
int c = 4; 3
a = a * b * c; 
b = a / b / c; 
c = a / b / c; 
a = a / b / c;

// 4 - for loops expressions
L  A  B  C
1  4  30 -7
2  19 20 -3
3  34 10 1
4  49 0  5
5  64 -10 9
6  79 -20 13

A) 15 * L - 11 // up by 15
B) -10 * L + 40 // down by 10
C) 4 * L - 11 // up by 4

// 5 - nested for loop 

public class Loops {
   public static void main(String[] args) {
      for (int i = 1; i <= 10; i++) { 
         for (int j = 1; j <= 10 - i; j++) {
            System.out.print(" ");
         }
         for (int j = 1; j <= 2 * i - 1; j++) {
            System.out.print("*");
         }
         System.out.println();
      }
   }
}

int i, 1-10 loops
int j, draws stars (starting with 1, ending with 19) in a pyramid shape
draw 9 spaces, then *
draw 8 spaces, then 3 *

// 6)

////////////////\\\\\\\\\\\\\\\\
////////////********\\\\\\\\\\\\
////////****************\\\\\\\\
////************************\\\\
********************************

see Section2.java

// 7) 
1, 2, 3, 4, 5, 6, ...   3    13, 17, 21, 25, 29, 33, ...    4*Line + 9
1, 2, 3, 4, 5, 6, ...   5    19, 23, 27, 31, 35, 39, ...    4*Line + 15
                                                            4 * Line + (3 * Size)
                                                            
1, 2, 3, 4, 5, 6, ...   4     10, 9, 8, 7, 6, 5, ...        -1*Line + 11  
                        5     12
                        6     14
                        7     16
                        8     18
1, 2, 3, 4, 5, 6, ...   9     20, 19, 18, 17, 16, 15, ...   -1*Line + 21
                              2                             -1*Line + (2 * Size + 3)
// 8) 

The previous output used a constant size of 5. Here is the output for a
constant size of 3:
////////\\\\\\\\
////********\\\\
****************
Here is the output for a constant size of 7:
////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\
////////////////////********\\\\\\\\\\\\\\\\\\\\
////////////////****************\\\\\\\\\\\\\\\\
////////////************************\\\\\\\\\\\\
////////********************************\\\\\\\\
////****************************************\\\\
************************************************
